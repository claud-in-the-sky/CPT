import pygame
pygame.init()
#randomize positions of dots
import random
#draw arc (basket)
import math

#define colours
Bl= (0, 0, 0)
R = (255, 0, 0)
G = (0, 255, 0)
B = (0, 0, 255)
W = (255, 255, 255)
Br= (139,69,19)

#open window
size = (1366, 768)
screen = pygame.display.set_mode(size)
screen.fill(W)

#randomize position of dots falling
x = range(0, 1347)
xBl = random.choice(x)
xR = random.choice(x)
xG = random.choice(x)
xB = random.choice(x)

#draw dots and basket
Black = pygame.draw.ellipse(screen, Bl, [xBl,20,20,20],0)
Red = pygame.draw.ellipse(screen, R, [xR,20,20,20],0)
Green = pygame.draw.ellipse(screen, G, [xG,20,20,20],0)
Blue = pygame.draw.ellipse(screen, B, [xB,20,20,20],0)
pi = math.pi
Basket = pygame.draw.arc(screen, Br, [650,625,75, 75], pi, 0, 35)



#animation
black_x=50
While eat_time <= 1:30
for event in pygame.event.get() 
black
    black_x +=1

wait = pygame.time.wait()

pygame.display.flip()
wait(900)
----------------------------------------------------------------------
import pygame
pygame.init()

import random  #randomize positions of dots

import math  #draw arc(basket(needs pi))

if __name__ == "__main__":
    screen = pygame.display.set_mode((1280, 720))

    Bl = (0, 0, 0)
    R = (255, 0, 0)
    G = (0, 255, 0)
    B = (0, 0, 255)
    W = (255, 255, 255)
    Br = (139, 69, 19)
    bg = (135, 206, 250)

    screen.fill(bg)

    x = range(0, 1347)
    xBl = random.choice(x)
    xR = random.choice(x)
    xG = random.choice(x)
    xB = random.choice(x)

    black = pygame.draw.ellipse(screen, Bl, [xBl, 20, 20, 20], 0)
    red = pygame.draw.ellipse(screen, R, [xR, 20, 20, 20], 0)
    green = pygame.draw.ellipse(screen, G, [xG, 20, 20, 20], 0)
    blue = pygame.draw.ellipse(screen, B, [xB, 20, 20, 20], 0)
    pi = math.pi
    basket = pygame.draw.arc(screen, Br, [650, 625, 75, 75], pi, 0, 35)

    pygame.display.flip()

    pygame.time.Clock()

pygame.display.flip()

#  ffunnccttionnnnsssssss
#  loop through dots to randomize when they fall
    #  possibly make a list and randomly choose a dot from that list
#  loop through y-position of the dots for animation
#  for lvl1, remove red from list
#  for lvl2, remove green from list
#  for lvl3, add black to the list
#  once eat_time (the timer) is finished or 90,000 miliseconds has been reached
    #  end the game
#  add 2 to eat_point (the score counter) each time the top of the arc (basket) touches a coloured dot
#  deduct 1 from eat_point each time the top of the arc (basket) touches a black dot
#  start with lvl1 --> has normal blue, red, green dots and less black dots
#  once eat_point == 10
    #  call lvl2 function
#  once eat_point == 20
    #  call lvl2 function
#  once eat_point == 26
    #  call lvl3 function
    
    
    # Import a library of functions called 'pygame'
import pygame
import random
import math

# Initialize the game engine
pygame.init()

Bl= (0, 0, 0)
R = (255, 0, 0)
G = (0, 255, 0)
B = (0, 0, 255)
W = (255, 255, 255)
Br= (139,69,19)



# Set the height and width of the screen
SIZE = [1350, 720]

screen = pygame.display.set_mode(SIZE)

# Create an empty array
dot_list = []

clock = pygame.time.Clock()
# Loop 50 times and add a snow flake in a random x,y position
for i in range(10):
    clock.tick(20)
    x = random.randrange(0, 1350)
    y = random.randrange(0, 500)
    dot_list.append([x, y])



# Loop until the user clicks the close button.
done = False
while not done:

    for event in pygame.event.get():  # User did something
        if event.type == pygame.QUIT:  # If user clicked close
            done = True  # Flag that we are done so we exit this loop

    # Set the screen background
    screen.fill(W)

    # Process each snow flake in the list
    for i in range(len(dot_list)):

        # Draw the snow flake
        pygame.draw.circle(screen, Bl, [dot_list[i]],0)
        pygame.draw.circle(screen, R, [dot_list[i]],0)
        pygame.draw.circle(screen, G, [dot_list[i]],0)
        pygame.draw.circle(screen, B, [dot_list[i]],0)
        pygame.draw.arc(screen, Br, [650,625,75, 75], math.pi, 0, 35)


        # Move the snow flake down one pixel
        dot_list[i][1] += 5

        # If the snow flake has moved off the bottom of the screen
        if dot_list[i][1] > 720:
            # Reset it just above the top
            y = random.randrange(-50, -10)
            dot_list[i][1] = y
            # Give it a new x position
            x = random.randrange(0, 1350)
            dot_list[i][0] = x

    # Go ahead and update the screen with what we've drawn.
    pygame.display.flip()
    clock.tick(20)

# Be IDLE friendly. If you forget this line, the program will 'hang'
# on exit.
pygame.quit()
----------------------------------------------------------------------
#  LVL 1
import pygame
import random
import math
pygame.init()

Bl= (0, 0, 0)
R = (255, 0, 0)
G = (0, 255, 0)
B = (0, 0, 255)
W = (255, 255, 255)
Br= (139,69,19)

SIZE = [1350, 720]
screen = pygame.display.set_mode(SIZE)

dot_list = []
dot_listbl = []
dot_listg = []
dot_listr = []
dot_listb = []

clock = pygame.time.Clock()
for i in range(3):
    clock.tick(20)
    x = random.randrange(0, 1350)
    y = random.randrange(0, 500)
    dot_list.append([x, y])

for i in range(3):
    clock.tick(20)
    x = random.randrange(0, 1350)
    y = random.randrange(0, 500)
    dot_listbl.append([x, y])

for i in range(3):
    clock.tick(20)
    x = random.randrange(0, 1350)
    y = random.randrange(0, 500)
    dot_listr.append([x, y])

for i in range(3):
    clock.tick(20)
    x = random.randrange(0, 1350)
    y = random.randrange(0, 500)
    dot_listg.append([x, y])

for i in range(3):
    clock.tick(20)
    x = random.randrange(0, 1350)
    y = random.randrange(0, 500)
    dot_listb.append([x, y])

bx = 650
# Loop until the user clicks the close button.
done = False
while not done:

    for event in pygame.event.get():  # User did something
        if event.type == pygame.QUIT:  # If user clicked close
            done = True  # Flag that we are done so we exit this loop

    # Set the screen background
    screen.fill(W)

    # Process each snow flake in the list
    for i in range(len(dot_listbl)):
        pygame.draw.circle(screen, Bl, dot_listbl[i],10,0)
    for i in range(len(dot_listr)):
        pygame.draw.circle(screen, R, dot_listr[i],10,0)
    for i in range(len(dot_listg)):
        pygame.draw.circle(screen, G, dot_listg[i],10,0)
    for i in range(len(dot_listb)):
        pygame.draw.circle(screen, B, dot_listb[i],10,0)
        pygame.draw.arc(screen, Br, [bx,625,75, 75], math.pi, 0, 35)


        # Move the snow flake down one pixel
        dot_listbl[i][1] += 5
        dot_listr[i][1] += 5
        dot_listg[i][1] += 5
        dot_listb[i][1] += 5

        # If the snow flake has moved off the bottom of the screen
        if dot_list[i][1] > 720:
            # Reset it just above the top
            y = random.randrange(-50, -10)
            dot_list[i][1] = y
            # Give it a new x position
            x = random.randrange(0, 1350)
            dot_list[i][0] = x
    if event.type == pygame.KEYDOWN:
        if event.key == pygame.K_LEFT:
            bx -= 15
        if event.key == pygame.K_RIGHT:
            bx += 15
    if bx > 1250:
        pygame.K_RIGHT = False
        continue
    if bx < 20:
        pygame.K_LEFT = False
        continue


    # update the screen
    pygame.display.flip()
    clock.tick(20)

pygame.quit()
