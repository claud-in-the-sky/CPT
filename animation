import pygame
pygame.init()
#randomize positions of dots
import random
#draw arc (basket)
import math

#define colours
Bl= (0, 0, 0)
R = (255, 0, 0)
G = (0, 255, 0)
B = (0, 0, 255)
W = (255, 255, 255)
Br= (139,69,19)

#open window
size = (1366, 768)
screen = pygame.display.set_mode(size)
screen.fill(W)

#randomize position of dots falling
x = range(0, 1347)
xBl = random.choice(x)
xR = random.choice(x)
xG = random.choice(x)
xB = random.choice(x)

#draw dots and basket
Black = pygame.draw.ellipse(screen, Bl, [xBl,20,20,20],0)
Red = pygame.draw.ellipse(screen, R, [xR,20,20,20],0)
Green = pygame.draw.ellipse(screen, G, [xG,20,20,20],0)
Blue = pygame.draw.ellipse(screen, B, [xB,20,20,20],0)
pi = math.pi
Basket = pygame.draw.arc(screen, Br, [650,625,75, 75], pi, 0, 35)



#animation
black_x=50
While eat_time <= 1:30
for event in pygame.event.get() 
black
    black_x +=1

wait = pygame.time.wait()

pygame.display.flip()
wait(900)
----------------------------------------------------------------------
import pygame
pygame.init()

import random  #randomize positions of dots

import math  #draw arc(basket(needs pi))

if __name__ == "__main__":
    screen = pygame.display.set_mode((1280, 720))

    Bl = (0, 0, 0)
    R = (255, 0, 0)
    G = (0, 255, 0)
    B = (0, 0, 255)
    W = (255, 255, 255)
    Br = (139, 69, 19)
    bg = (135, 206, 250)

    screen.fill(bg)

    x = range(0, 1347)
    xBl = random.choice(x)
    xR = random.choice(x)
    xG = random.choice(x)
    xB = random.choice(x)

    black = pygame.draw.ellipse(screen, Bl, [xBl, 20, 20, 20], 0)
    red = pygame.draw.ellipse(screen, R, [xR, 20, 20, 20], 0)
    green = pygame.draw.ellipse(screen, G, [xG, 20, 20, 20], 0)
    blue = pygame.draw.ellipse(screen, B, [xB, 20, 20, 20], 0)
    pi = math.pi
    basket = pygame.draw.arc(screen, Br, [650, 625, 75, 75], pi, 0, 35)

    pygame.display.flip()

    pygame.time.Clock()

pygame.display.flip()

#  ffunnccttionnnnsssssss
#  loop through dots to randomize when they fall
    #  possibly make a list and randomly choose a dot from that list
#  loop through y-position of the dots for animation
#  for lvl1, remove red from list
#  for lvl2, remove green from list
#  for lvl3, add black to the list
#  once eat_time (the timer) is finished or 90,000 miliseconds has been reached
    #  end the game
#  add 2 to eat_point (the score counter) each time the top of the arc (basket) touches a coloured dot
#  deduct 1 from eat_point each time the top of the arc (basket) touches a black dot
#  start with lvl1 --> has normal blue, red, green dots and less black dots
#  once eat_point == 10
    #  call lvl2 function
#  once eat_point == 20
    #  call lvl2 function
#  once eat_point == 26
    #  call lvl3 function
